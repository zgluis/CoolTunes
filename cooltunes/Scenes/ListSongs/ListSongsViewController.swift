//
//  ListSongsViewController.swift
//  cooltunes
//
//  Created by Luis Zapata on 10/5/19.
//  Copyright (c) 2019 Luis Zapata. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListSongsDisplayLogic: class
{
    func displayResults(viewModel: ListSongs.Search.ViewModel)
}

class ListSongsViewController: UIViewController, ListSongsDisplayLogic
{
    var interactor: ListSongsBusinessLogic?
    var router: (NSObjectProtocol & ListSongsRoutingLogic & ListSongsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListSongsInteractor()
        let presenter = ListSongsPresenter()
        let router = ListSongsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    @IBOutlet weak var resultTableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    var displayedResult: [ListSongs.Search.ViewModel.DisplayedSongs] = []

    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        searchBar.delegate = self
        resultTableView.delegate = self
        resultTableView.dataSource = self
    }
    
    func search(term: String){
        interactor?.search(term: term)
    }
    
    func displayResults(viewModel: ListSongs.Search.ViewModel)
    {
        displayedResult = viewModel.displayedSongs
        DispatchQueue.main.async {
            self.resultTableView.reloadData()
        }
    }
}

extension ListSongsViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.displayedResult.count
    }
    
    //Setup cell
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSong = self.displayedResult[indexPath.row]
        var cell = resultTableView.dequeueReusableCell(withIdentifier: "SongCell")
        if cell == nil {
          cell = UITableViewCell(style: .value1, reuseIdentifier: "SongCell")
        }
        cell?.textLabel?.text = displayedSong.trackName
        cell?.detailTextLabel?.text = displayedSong.artistName
        cell?.detailTextLabel?.alpha = 0.5
        return cell!
    }
    
    //Cell tapped
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToShowSong()
    }
}

extension ListSongsViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if(searchBar.text != nil) {
            self.search(term: searchBar.text!)
        }
    }
    
}
