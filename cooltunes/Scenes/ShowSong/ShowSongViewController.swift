//
//  ShowSongViewController.swift
//  cooltunes
//
//  Created by Luis Zapata on 10/6/19.
//  Copyright (c) 2019 Luis Zapata. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation

protocol ShowSongDisplayLogic: class
{
    func displaySong(song: Song?)
    func displayAlbumSongs(viewModel: ShowSong.AlbumSongs.ViewModel)
}

class ShowSongViewController: UIViewController, ShowSongDisplayLogic
{
    
    var interactor: ShowSongBusinessLogic?
    var router: (NSObjectProtocol & ShowSongRoutingLogic & ShowSongDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowSongInteractor()
        let presenter = ShowSongPresenter()
        let router = ShowSongRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    @IBOutlet weak var artworkImageView: UIImageView!
    @IBOutlet weak var trackNameLabel: UILabel!
    @IBOutlet weak var artistNameLabel: UILabel!
    @IBOutlet weak var collectionNameLabel: UILabel!
    @IBOutlet weak var playerActionButton: UIButton!
    @IBOutlet weak var resultTableView: UITableView!
    
    var player: AVPlayer?
    var playerItem: AVPlayerItem?
    var songPreviewUrl: URL?
    var displayedAlbumSongs: [ShowSong.AlbumSongs.ViewModel.DisplayedSongs] = []
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.getSong()
        interactor?.requestAlbumSongs()
        resultTableView.delegate = self
        resultTableView.dataSource = self
    }
    
    //Play or Pause
    @IBAction func audioActionTapped(_ sender: Any) {
        if player?.rate == 0
        {
            player!.play()
            playerActionButton!.setTitle("Pause", for: .normal)
        } else {
            player!.pause()
            playerActionButton!.setTitle("Play", for: .normal)
        }
    }
    
    func displaySong(song: Song?) {
        if song != nil {
            if let urlImage: URL = URL(string: song!.artworkUrl100 ?? "") {
                artworkImageView.load(url: urlImage)
            } else {
                artworkImageView.image = #imageLiteral(resourceName: "musical-note")
            }
            trackNameLabel.text = song?.trackName
            artistNameLabel.text = song?.artistName
            collectionNameLabel.text = song?.collectionName
            songPreviewUrl = URL(string: song?.previewUrl ?? "")
            if songPreviewUrl != nil {
                let playerItem: AVPlayerItem = AVPlayerItem(url: songPreviewUrl!)
                player = AVPlayer(playerItem: playerItem)
            }
        }
    }
    
    func displayAlbumSongs(viewModel: ShowSong.AlbumSongs.ViewModel) {
        displayedAlbumSongs = viewModel.displayedSongs
        DispatchQueue.main.async {
            self.resultTableView.reloadData()
        }
    }
}

extension ShowSongViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.displayedAlbumSongs.count
    }
    
    //Setup cell
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSong = self.displayedAlbumSongs[indexPath.row]
        var cell = resultTableView.dequeueReusableCell(withIdentifier: "AlbumSongCell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "AlbumSongCell")
        }
        cell?.textLabel?.text = displayedSong.trackName
        if displayedSong.trackNumber != nil {
            cell?.detailTextLabel?.text = String(displayedSong.trackNumber!)
        }
        cell?.detailTextLabel?.alpha = 0.5
        return cell!
    }
}

